@using System
@using Sandbox.UI
@inherits Panel
@namespace Ultraneon.UI
@attribute [StyleSheet]

<root>
	<div class="radar-background">
		<div class="radar-content">
			@foreach ( var point in CapturePoints )
			{
				<div class="radar-blip @point.ControllingTeam" style="left: @( point.MinimapX )%; top: @( point.MinimapY )%;">
				</div>
			}
			<div class="player-dot"></div> 
		</div>
	</div>
</root>

@code
{
	private Entity playerEntity;
	private CameraComponent mainCamera;
	public List<CaptureZoneEntity> CapturePoints { get; set; } = new();

	protected override void OnAfterTreeRender( bool firstTime )
	{
		base.OnAfterTreeRender( firstTime );

		if ( firstTime )
		{
			playerEntity = Scene.Components.GetAll<Entity>().FirstOrDefault( x => x.GameObject.Tags.Has( "player" ) );
			mainCamera = Scene.Components.GetAll<CameraComponent>().FirstOrDefault( x => x.GameObject.Tags.Has( "maincamera" ) );
			CapturePoints = Scene.Components.GetAll<CaptureZoneEntity>().ToList();
		}
	}

	public override void Tick()
	{
		if ( playerEntity == null || mainCamera == null ) return;

		var playerPosition = mainCamera.Transform.Position;
		var playerRotation = mainCamera.Transform.Rotation;
		var maxRadarDistance = 1000f;

		foreach ( var point in CapturePoints )
		{
			var relativePos = point.Transform.Position - playerPosition;

			var rotatedPos = playerRotation.Inverse * relativePos;

			var distance = rotatedPos.Length;
			distance = Math.Min( distance, maxRadarDistance );

			point.MinimapX = 50f + (rotatedPos.x / maxRadarDistance) * 50f;
			point.MinimapY = 50f - (rotatedPos.y / maxRadarDistance) * 50f; // Subtract because Y is inverted in UI space
		}
	}

	protected override int BuildHash()
	{
		return HashCode.Combine(
			CapturePoints.Select( p => HashCode.Combine( p.MinimapX, p.MinimapY, p.ControllingTeam, p.CaptureProgress ) )
		);
	}
}
